---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: aws-load-balancer
spec:
  controller: ingress.k8s.aws/alb

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: askcto-ingress
  # namespace: s-api
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/subnets: 'subnet-067be2228f9f617b6, subnet-031ee61e22c86106d'
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:595312265488:certificate/00cc2fcb-7f4d-4a7c-850e-4a7038c18602
    alb.ingress.kubernetes.io/group.name: "group"
    alb.ingress.kubernetes.io/group.order: "1"
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/load-balancer-name: askcto-alb
spec:
  ingressClassName: aws-load-balancer
  rules:
    - host: cto.ascendingdc.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: librechat-api-service
                port:
                  number: 3080
